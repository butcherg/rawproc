
cmake_minimum_required(VERSION 3.15)

MESSAGE("CMAKE_HOST_SYSTEM_NAME ${CMAKE_HOST_SYSTEM_NAME}")
MESSAGE("CMAKE_HOST_SYSTEM_VERSION ${CMAKE_HOST_SYSTEM_VERSION}")

project(rawproc LANGUAGES CXX C)

string(TIMESTAMP BUILDDATE)
#set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -ggdb -DVERSION=\\\"1.3\\\"  -DBUILDDATE=\\\"${BUILDDATE}\\\"")
add_compile_options(-ggdb -DVERSION="1.3"  -DBUILDDATE="${BUILDDATE}")

if(GMIC)
	add_compile_options(-DUSE_GMIC)
endif(GMIC)

add_executable(rawproc src/rawprocApp.cpp)
add_executable(img src/img.cpp)
add_executable(wxcmd src/wxcmd.cpp)
add_executable(exif src/exif.cpp)

add_custom_target(doc 	
			COMMAND
				bash -c "zip -v -r -j rawprocdoc.zip \
				${CMAKE_CURRENT_SOURCE_DIR}/doc/*.html \
				${CMAKE_CURRENT_SOURCE_DIR}/doc/*.css \
				${CMAKE_CURRENT_SOURCE_DIR}/doc/*.png \
				${CMAKE_CURRENT_SOURCE_DIR}/doc/*.hh* "
			VERBATIM
		)

add_subdirectory(src)

find_package(OpenMP)
if(OpenMP_CXX_FOUND)
    target_link_libraries(rawproc  OpenMP::OpenMP_CXX)
	target_link_libraries(img  OpenMP::OpenMP_CXX)
	target_link_libraries(exif  OpenMP::OpenMP_CXX)
endif()

if(WXDIR)
	execute_process(COMMAND bash -c "${WXDIR}/wx-config --cxxflags" OUTPUT_VARIABLE WX_FLAGS OUTPUT_STRIP_TRAILING_WHITESPACE)
	execute_process(COMMAND bash -c "${WXDIR}/wx-config --libs" OUTPUT_VARIABLE WX_LIBS OUTPUT_STRIP_TRAILING_WHITESPACE )
	list(APPEND CMAKE_CXX_FLAGS "${WX_FLAGS}")
	target_link_libraries(rawproc ${WX_LIBS})
	target_link_libraries(wxcmd ${WX_LIBS})
	message(STATUS "wxWidgets configured with wx-config at ${WXDIR}")
else()
	find_package(wxWidgets REQUIRED COMPONENTS std aui propgrid)
	include(${wxWidgets_USE_FILE})
	target_link_libraries(rawproc ${wxWidgets_LIBRARIES})
	target_link_libraries(wxcmd ${wxWidgets_LIBRARIES})
endif(WXDIR)

find_package(JPEG REQUIRED)
include_directories(${JPEG_INCLUDE_DIR})
target_link_libraries(rawproc ${JPEG_LIBRARIES})
target_link_libraries(img ${JPEG_LIBRARIES})
target_link_libraries(exif ${JPEG_LIBRARIES})

find_package(TIFF REQUIRED)
include_directories(${TIFF_INCLUDE_DIR})
target_link_libraries(rawproc ${TIFF_LIBRARIES})
target_link_libraries(img ${TIFF_LIBRARIES})
target_link_libraries(exif ${TIFF_LIBRARIES})

find_package(PNG REQUIRED)
include_directories(${PNG_INCLUDE_DIR})
target_link_libraries(rawproc ${PNG_LIBRARIES})
target_link_libraries(img ${PNG_LIBRARIES})
target_link_libraries(exif ${PNG_LIBRARIES})


find_package(PkgConfig REQUIRED)

#LittleCMS:
if (LCMS2FLAGS AND LCMS2LIB)
	include_directories ("${LCMS2FLAGS}")
	target_link_libraries(rawproc "${LCMS2LIB}")
	target_link_libraries(img "${LCMS2LIB}")
	target_link_libraries(exif "${LCMS2LIB}")
	message(STATUS "LittleCMS configured with LCMS2FlAGS and LCMS2LIB")
else()
	pkg_check_modules(LCMS2 REQUIRED lcms2)
	if (LCMS2_FOUND)
		include_directories(${LCMS2_INCLUDE_DIR})
		target_link_libraries(rawproc ${LCMS2_LIBRARIES})
		target_link_libraries(img ${LCMS2_LIBRARIES})
		target_link_libraries(exif ${LCMS2_LIBRARIES})
	else()
		message(STATUS "lcms2 not found")
	endif(LCMS2_FOUND)
endif(LCMS2FLAGS AND LCMS2LIB)

#Libraw:
if (LIBRAWFLAGS AND LIBRAWLIB)
	include_directories ("${LIBRAWFLAGS}")
	target_link_libraries(rawproc "${LIBRAWLIB}")
	target_link_libraries(img "${LIBRAWLIB}")
	target_link_libraries(img "${LIBRAWLIB}")
	message(STATUS "Libraw configured with LIBRAWFlAGS and LIBRAWLIB")
else()
	pkg_check_modules(LIBRAW REQUIRED libraw)
	if (LIBRAW_FOUND)
		include_directories(${LIBRAW_INCLUDE_DIR})
		target_link_libraries(rawproc ${LIBRAW_LIBRARIES})
		target_link_libraries(img ${LIBRAW_LIBRARIES})
		target_link_libraries(exif ${LIBRAW_LIBRARIES})
	else()
		message(STATUS "libraw not found")
	endif(LIBRAW_FOUND)
endif(LIBRAWFLAGS AND LIBRAWLIB)

#Lensfun:
if (LENSFUNFLAGS AND LENSFUNLIB)
	include_directories ("${LENSFUNFLAGS}")
	target_link_libraries(rawproc "${LENSFUNLIB}")
	target_link_libraries(img "${LENSFUNLIB}")
	target_link_libraries(exif "${LENSFUNLIB}")
	message(STATUS "Lensfun configured with LENSFUNFlAGS and LENSFUNLIB")
else()
	pkg_check_modules(LENSFUN REQUIRED lensfun)
	if (LENSFUN_FOUND)
		include_directories(${LENSFUN_INCLUDE_DIR})
		target_link_libraries(rawproc ${LENSFUN_LIBRARIES})
		target_link_libraries(img ${LENSFUN_LIBRARIES})
		target_link_libraries(exif ${LENSFUN_LIBRARIES})
	else()
		message(STATUS "lensfun not found")
	endif(LENSFUN_FOUND)
endif (LENSFUNFLAGS AND LENSFUNLIB)

#exiv2:
if (EXIV2FLAGS AND EXIV2LIB)
	include_directories ("${EXIV2FLAGS}")
	target_link_libraries(rawproc "${EXIV2LIB}")
	target_link_libraries(img "${EXIV2LIB}")
	target_link_libraries(exif "${EXIV2LIB}")
	message(STATUS "exiv2 configured with EXIV2FlAGS and EXIV2LIB")
else()
	pkg_check_modules(EXIV2 REQUIRED exiv2)
	if (EXIV2_FOUND)
		include_directories(${EXIV2_INCLUDE_DIR})
		target_link_libraries(rawproc ${EXIV2_LIBRARIES})
		target_link_libraries(img ${EXIV2_LIBRARIES})
		target_link_libraries(exif ${EXIV2_LIBRARIES})
	else()
		message(STATUS "exiv2 not found")
	endif(EXIV2_FOUND)
endif (EXIV2FLAGS AND EXIV2LIB)


#Optional Features:

#gmic:
if (GMIC)
	if (GMICFLAGS AND GMICLIB)
		include_directories("${GMICFLAGS}")
		target_link_libraries(rawproc "${GMICLIB}")
		target_link_libraries(img "${GMICLIB}")
		target_link_libraries(exif "${GMICLIB}")
		message(STATUS "GMIC configured with GMICFlAGS and GMICLIB")
	else()
		pkg_check_modules(GMIC REQUIRED gmic)
		if (GMIC_FOUND)
			include_directories(${GMIC_INCLUDE_DIR})
			target_link_libraries(rawproc ${GMIC_LIBRARIES})
			target_link_libraries(img ${GMIC_LIBRARIES})
			target_link_libraries(exif ${GMIC_LIBRARIES})
		else()
			message(STATUS "gmic not found")
		endif(GMIC_FOUND)
	endif (GMICFLAGS AND GMICLIB)
endif (GMIC)

if (LIBRTPROCESS)
	if (LIBRTPROCESSFLAGS AND LIBRTPROCESSLIB)
		include_directories("${LIBRTPROCESSFLAGS}")
		target_link_libraries(rawproc "${LIBRTPROCESSLIB}")
		target_link_libraries(img "${LIBRTPROCESSLIB}")
		target_link_libraries(exif "${LIBRTPROCESSLIB}")
		message(STATUS "GMIC configured with LIBRTPROCESSFlAGS and LIBRTPROCESSLIB")
	else()
		pkg_check_modules(LIBRTPROCESS REQUIRED rtprocess)
		if (LIBRTPROCESS_FOUND)
			include_directories(${LIBRTPROCESS_INCLUDE_DIR})
			target_link_libraries(rawproc ${LIBRTPROCESS_LIBRARIES})
			target_link_libraries(img ${LIBRTPROCESS_LIBRARIES})
			target_link_libraries(exif ${LIBRTPROCESS_LIBRARIES})
		else()
			message(STATUS "gmic not found")
		endif(LIBRTPROCESS_FOUND)
	endif (LIBRTPROCESSFLAGS AND LIBRTPROCESSLIB)
endif (LIBRTPROCESS)

