
cmake_minimum_required(VERSION 3.15)

project(rawproc LANGUAGES CXX C)

string(TIMESTAMP BUILDDATE)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DVERSION=\\\"1.3\\\"  -DBUILDDATE=\\\"${BUILDDATE}\\\"")

add_executable(rawproc src/rawprocApp.cpp)
add_executable(img src/img.cpp)
add_executable(wxcmd src/wxcmd.cpp)
add_executable(exif src/exif.cpp)

add_custom_target(doc zip -v -r -j rawprocdoc.zip . -i doc/*.html doc/*.css doc/*.png doc/*.hh* USES_TERMINAL WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}")

add_subdirectory(src)

find_package(OpenMP)
if(OpenMP_CXX_FOUND)
    target_link_libraries(rawproc  OpenMP::OpenMP_CXX)
	target_link_libraries(img  OpenMP::OpenMP_CXX)
	target_link_libraries(exif  OpenMP::OpenMP_CXX)
endif()

if(WXDIR)
	execute_process(COMMAND bash -c "${WXDIR}/wx-config --cxxflags" OUTPUT_VARIABLE WX_FLAGS OUTPUT_STRIP_TRAILING_WHITESPACE)
	execute_process(COMMAND bash -c "${WXDIR}/wx-config --libs" OUTPUT_VARIABLE WX_LIBS OUTPUT_STRIP_TRAILING_WHITESPACE )
	list(APPEND CMAKE_CXX_FLAGS "${WX_FLAGS}")
	target_link_libraries(rawproc ${WX_LIBS})
	target_link_libraries(wxcmd ${WX_LIBS})
	message(STATUS "wxWidgets configured with wx-config at ${WXDIR}")
else()
	find_package(wxWidgets REQUIRED COMPONENTS std aui propgrid)
	include(${wxWidgets_USE_FILE})
	target_link_libraries(rawproc ${wxWidgets_LIBRARIES})
	target_link_libraries(wxcmd ${wxWidgets_LIBRARIES})
endif(WXDIR)

find_package(JPEG REQUIRED)
include_directories(${JPEG_INCLUDE_DIR})
target_link_libraries(rawproc ${JPEG_LIBRARIES})
target_link_libraries(img ${JPEG_LIBRARIES})
target_link_libraries(exif ${JPEG_LIBRARIES})

find_package(TIFF REQUIRED)
include_directories(${TIFF_INCLUDE_DIR})
target_link_libraries(rawproc ${TIFF_LIBRARIES})
target_link_libraries(img ${TIFF_LIBRARIES})
target_link_libraries(exif ${TIFF_LIBRARIES})

find_package(PNG REQUIRED)
include_directories(${PNG_INCLUDE_DIR})
target_link_libraries(rawproc ${PNG_LIBRARIES})
target_link_libraries(img ${PNG_LIBRARIES})
target_link_libraries(exif ${PNG_LIBRARIES})


find_package(PkgConfig REQUIRED)

#LittleCMS:
if (LCMSFLAGS AND LCMSLIB)
	include ("${LCMSFLAGS}")
	target_link_libraries(rawproc "${LCMSLIB}")
	target_link_libraries(img "${LCMSLIB}")
	target_link_libraries(exif "${LCMSLIB}")
else()
	pkg_check_modules(LCMS2 REQUIRED lcms2)
	if (LCMS2_FOUND)
		include_directories(${LCMS2_INCLUDE_DIR})
		target_link_libraries(rawproc ${LCMS2_LIBRARIES})
		target_link_libraries(img ${LCMS2_LIBRARIES})
		target_link_libraries(exif ${LCMS2_LIBRARIES})
	else()
		message(STATUS "lcms2 not found")
	endif(LCMS2_FOUND)
endif(LCMSFLAGS AND LCMSLIB)

#Libraw:
if (LIBRAWFLAGS AND LIBRAWLIB)
	include ("${LIBRAWFLAGS}")
	target_link_libraries(rawproc "${LIBRAWLIB}")
	target_link_libraries(img "${LIBRAWLIB}")
	target_link_libraries(img "${LIBRAWLIB}")
else()
	pkg_check_modules(LIBRAW REQUIRED libraw)
	if (LIBRAW_FOUND)
		include_directories(${LIBRAW_INCLUDE_DIR})
		target_link_libraries(rawproc ${LIBRAW_LIBRARIES})
		target_link_libraries(img ${LIBRAW_LIBRARIES})
		target_link_libraries(exif ${LIBRAW_LIBRARIES})
	else()
		message(STATUS "libraw not found")
	endif(LIBRAW_FOUND)
endif(LIBRAWFLAGS AND LIBRAWLIB)

#Lensfun:
if (LENSFUNFLAGS AND LENSFUNLIB)
	include ("${LENSFUNFLAGS}")
	target_link_libraries(rawproc "${LENSFUNLIB}")
	target_link_libraries(img "${LENSFUNLIB}")
else()
	pkg_check_modules(LENSFUN REQUIRED lensfun)
	if (LENSFUN_FOUND)
		include_directories(${LENSFUN_INCLUDE_DIR})
		target_link_libraries(rawproc ${LENSFUN_LIBRARIES})
		target_link_libraries(img ${LENSFUN_LIBRARIES})
	else()
		message(STATUS "lensfun not found")
	endif(LENSFUN_FOUND)
endif (LENSFUNFLAGS AND LENSFUNLIB)

#exiv2:
if (EXIV2FLAGS AND EXIV2LIB)
	include ("${EXIV2FLAGS}")
	target_link_libraries(rawproc "${EXIV2LIB}")
	target_link_libraries(img "${EXIV2LIB}")
	target_link_libraries(exif "${EXIV2LIB}")
else()
	pkg_check_modules(EXIV2 REQUIRED exiv2)
	if (EXIV2_FOUND)
		include_directories(${EXIV2_INCLUDE_DIR})
		target_link_libraries(rawproc ${EXIV2_LIBRARIES})
		target_link_libraries(img ${EXIV2_LIBRARIES})
		target_link_libraries(exif ${EXIV2_LIBRARIES})
	else()
		message(STATUS "exiv2 not found")
	endif(EXIV2_FOUND)
endif (EXIV2FLAGS AND EXIV2LIB)

